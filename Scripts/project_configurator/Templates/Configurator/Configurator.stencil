{# Macros #}
{%- macro localizedContainerArguments container %}
			fallback: "{{ container.localized[container.base] }}",
			storage: [
			{% for key, value in container.localized %}
				"{{ key }}": "{{ value }}",
			{% endfor %}
			]
{% endmacro -%}

{% macro screensArguments screensToDisplay %}
	{% for screen in screensToDisplay %}
		{% if screen.type == "other" %}
				.other(
					parameters: .init(
						icon: UIImage(named: "{{ screen.parameters.icon }}"),
						title: LocalizedStringContainer(
							{% call localizedContainerArguments screen.parameters.title %}
						),
						url: LocalizedUrlContainer(
							{% call localizedContainerArguments screen.parameters.url %}
						)
					)
				)
		{%- else %}
				.{{ screen.type }}
		{%- endif -%}
		{%- ifnot forloop.last -%},{%- endif +%}
	{% endfor %}
{% endmacro -%}
// This file was generated by project_configurator tool
// 
// DO NOT EDIT
//
// Copyright Â© {{ year }} CleverPumpkin. All rights reserved.

import UIKit
import WLConfig
import WLFlights
import WLHotels
import WLInformation
import WLSupport

#if canImport(WLDebug)
import WLDebug
#endif

enum Configurator {

	// MARK: - Private static properties

	private static var isConfigurationWasComplete = false

	// MARK: - Internal static methods

	static func configure() {
		dispatchPrecondition(
			condition: .onQueue(.main)
		)

		guard !isConfigurationWasComplete else {
			return
		}

		// Localized containers

		let privacyUrlLocalizedContainer = LocalizedUrlContainer(
			{% call localizedContainerArguments context.constants.policy_url %}
		)

		let partnerUrlLocalizedContainer = LocalizedUrlContainer(
			{% call localizedContainerArguments context.info_screen_config.about_app_info.partner_url %}
		)

		let applicationDescriptionLocalizedContainer = LocalizedStringContainer(
			{% call localizedContainerArguments context.info_screen_config.about_app_info.description %}
		)

		let developerLocalizedContainer = LocalizedStringContainer(
			{% call localizedContainerArguments context.info_screen_config.about_app_info.developer %}
		)

		// White-Label configuration

		let applicationConstants = ApplicationConfiguration.Constants(
			{% if context.constants.appsflyer_dev_key  and context.constants.appsflyer_dev_key.count > 0 and context.constants.appsflyer_dev_key != "<null>" %}
			appsFlyerDevKey: "{{ context.constants.appsflyer_dev_key }}",
			{% else %}
			appsFlyerDevKey: nil,
			{% endif %}
			{% if context.advertising.appodeal_api_key and context.advertising.appodeal_api_key.count > 0 and context.advertising.appodeal_api_key != "<null>" %}
			appodealApiKey: "{{ context.advertising.appodeal_api_key }}"
			{% else %}
			appodealApiKey: nil
			{% endif %}
		)

		let aplicationConfiguration = ApplicationConfiguration(
			tabs: .init(
				{% call screensArguments context.white_label_config.screens_to_display %}
			),
			informationScreenConfiguration: InformationScreenConfiguration(
				optionalItemsToDisplay: [
				{% for item in context.info_screen_config.items_to_display %}
					.{{ item | snakeToCamelCase | lowerFirstLetter }}
					{%- ifnot forloop.last -%},{%- endif +%}
				{% endfor %}
				],
				aboutAppInformation: .init(
					description: applicationDescriptionLocalizedContainer,
					developer: developerLocalizedContainer,
					partnerUrl: partnerUrlLocalizedContainer
				)
			),
			constants: applicationConstants
		)

		ApplicationConfiguration.setup(with: aplicationConfiguration)

		// Appearance Configuration

		{% if context.style.palette and context.style.palette.count > 0 and context.style.palette != "<null>" %}
		let palette: ColorPalette = .{{ context.style.palette | snakeToCamelCase | lowerFirstLetter }}
		{% else %}
		let palette: ColorPalette = .default
		{% endif %}

		var appearance: AppearanceConfiguration = Appearance(
			hexColor: "{{ context.style.base_color }}",
			iconStyle: .{{ context.style.icons_type | snakeToCamelCase | lowerFirstLetter }},
			cornerStyle: .{{ context.style.corners_type | snakeToCamelCase | lowerFirstLetter }},
			palette: palette
		)

		#if canImport(WLDebug)
		if let overridenAppearance = WLDebug.Debug.overridenAppearance {
			appearance = overridenAppearance
		}
		#endif

		// Advertising Configuration

		{% if context.advertising.appodeal_api_key and context.advertising.appodeal_api_key.count > 0 and context.advertising.appodeal_api_key != "<null>" %}
		let sdkAdvertisingConfiguration = Configuration.Advertising(
			advertisingProvider: AppodealAdvertisingProvider(),
			placements: .init(
				flights: .init(
					searchInterstitial: "{{ context.advertising.placements.air_ticket_placement_interstitial }}",
					searchReslutsBanner: "{{ context.advertising.placements.air_ticket_placement_banner }}"
				),
				hotels: .init(
					searchInterstitial: "{{ context.advertising.placements.hotels_placement_interstitial }}",
					searchReslutsBanner: "{{ context.advertising.placements.hotels_placement_banner }}"
				)
			)
		)
		{% else %}
		let sdkAdvertisingConfiguration: Configuration.Advertising? = nil
		{% endif %}

		// Analytics Configuration

		let sdkAnalyticsConfiguration = Configuration.Analytics(
			analyticsProvider: FirebaseAnalyticsProvider()
		)

		// SDK Configuration

		let configuration = Configuration(
			appearance: appearance,
			constants: .init(
				marker: "{{ context.constants.marker }}",
				clientDeviceHost: "{{ context.constants.client_device_host }}",
				apiKey: "{{ context.constants.api_key }}",
				appStoreId: "{{ context.constants.appstore_id }}",
				privacyUrl: privacyUrlLocalizedContainer,
				feedbackEmail: "{{ context.constants.feedback_email }}",
				sharingData: .init(
					sharingLink: "{{ context.constants.sharing_data.sharing_link }}",
					handlingLink: "{{ context.constants.sharing_data.handling_link }}"
				)
			),
			advertising: sdkAdvertisingConfiguration,
			analytics: sdkAnalyticsConfiguration
		)

		WhiteLabel.configure(with: configuration)

		if aplicationConfiguration.tabsToDisplay.contains(.flights) {
			WLFlights.ScreenProvider.shared.enable()
		}

		if aplicationConfiguration.tabsToDisplay.contains(.hotels) {
			WLHotels.ScreenProvider.shared.enable()
		}

		isConfigurationWasComplete = true
	}
}

// MARK: - Fileprivate types

private extension Configurator {
	struct Appearance: AppearanceConfiguration {

		// MARK: - Fileprivate properties

		var baseColorVariant: ColorVariant?
		var iconStyle: IconStyle
		var cornerStyle: CornerStyle
		var palette: ColorPalette

		// MARK: - Initialization

		init(
			hexColor: String,
			iconStyle: IconStyle,
			cornerStyle: CornerStyle,
			palette: ColorPalette
		) {
			self.baseColorVariant = .hex(hexColor)
			self.iconStyle = iconStyle
			self.cornerStyle = cornerStyle
			self.palette = palette
		}
	}
}
